1. Write a function pascals_triangle(rows) that prints the first rows of # type: ignore
Pascal’s Triangle using nested for loops. # type: ignore
pascals_triangle(5)
Output:
        1
       1 1
      1 2 1
     1 3 3 1
    1 4 6 4 1

ANS:

rows = int(input("Enter number of rows: "))
num = 1

for i in range(1, rows+1):
    for space in range(1, rows-i+1):
        print(" ",end="")
    for j in range(0, i):
        if j==0 or i==0:
            num = 1
        else:
            num = num * (i - j)//j
        print(num, end = " ")
    print()


2. Explain how the `continue` statement works in a loop. What are some
scenarios where using `continue` is more beneficial than restructuring
the loop?
- Coding Challenge: Write a Python program that iterates through a list
of numbers and prints only those numbers that are divisible by 3, using
the `continue` statement.

ANS:

The continue statement is used within loops to skip the remaining code in
the current iteration and proceed directly to the next iteration. It helps
in cases where certain conditions require ignoring part of the loop body 
without breaking the entire loop.

numbers = [10, 12, 15, 18, 22, 27, 30, 35]

for num in numbers:
    if num % 3 != 0:
        continue
    print(num)


3. Use list comprehension to generate all Pythagorean triplets (a, b, c)
where a² + b² = c² and a, b, c ≤ 50.
ANS:

triplets = [(a, b, c) for a in range(1, 51) 
                     for b in range(a, 51) 
                     for c in range(b, 51) 
                     if a**2 + b**2 == c**2]
print(triplets)


4. Write a function max_consecutive_sum(nums, k) that finds the
maximum sum of k consecutive elements in a list.
ANS:

def max_consecutive_sum(nums, k):
    if not nums or k > len(nums):
        return None  # Handle edge cases

    max_sum = current_sum = sum(nums[:k])

    for i in range(k, len(nums)):
        current_sum += nums[i] - nums[i - k] 
        max_sum = max(max_sum, current_sum)  
    return max_sum

nums = [2, 1, 5, 1, 3, 2]
k = 3
print(max_consecutive_sum(nums, k))  


5. Write a function that takes a list as an argument and modifies it by
appending a new item. Demonstrate how changes to the list inside the
function affect the list outside the function.
ANS:

def modify_list(lst):
    lst.append("new item") 

my_list = [1, 2, 3]
print("Before function call:", my_list)

modify_list(my_list)

print("After function call:", my_list)


6. Take a number as input and print the Fibonacci sequence up to that
many terms using User-defined functions.
ANS:

def fibonacci(n):
    if n <= 0:
        print("Please enter a positive integer.")
        return

    fib_seq = [0, 1]  # First two terms
    for _ in range(2, n): 
        fib_seq.append(fib_seq[-1] + fib_seq[-2])

    print("Fibonacci Sequence:", fib_seq[:n])

num_terms = int(input("Enter the number of terms: "))
fibonacci(num_terms)

